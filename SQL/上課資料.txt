上課講義網址:https://www.chainhao.com.tw/
密碼:php5347

找尋資料
-------------------
SELECT *
FROM userinfo LEFT JOIN live ON live.uid = userinfo.uid
 	LEFT JOIN house on house.hid = live.hid
    LEFT JOIN phone on phone.hid = house.hid
    LEFT JOIN bill on bill.tel = phone.tel
WHERE cname = '王大明'


計數
-------------------------------
SELECT count(*)
FROM userinfo

SELECT count(*)
FROM bill
WHERE fee > 500


分組計數
-------------------------------
SELECT tel,COUNT(*)
FROM bill
GROUP by tel


總和
-------------------------------
SELECT tel, sum(fee)
FROM bill
GROUP by tel

平均
-------------------------------
SELECT tel, avg(fee)
FROM bill
GROUP by tel

最大最小值
-------------------------------
SELECT tel, MAX(fee)
FROM bill
GROUP by tel

回傳0
-------------------------------
SELECT COUNT(null)

取左右的字
-------------------------------
SELECT cname, LEFT(cname, 1),RIGHT(cname, 1)
FROM userinfo
WHERE cname is not null and cname <> ""


人有幾間房
-------------------------------
SELECT userinfo.uid, cname, COUNT(hid)
FROM userinfo LEFT JOIN live on userinfo.uid = live.uid
GROUP by userinfo.uid, cname


空屋率
-------------------------------
select concat(floor((
   (
       select count(*)
       from House left join Live on House.hid = Live.hid
       where Live.uid is null       
   )
   /
   (select count(*) from House)
) * 100), '%') as '空屋率'

帳單金額最高的一筆
-------------------------------
SELECT *    
FROM bill
ORDER by fee DESC
LIMIT 1

帳單金額最高的所有筆
-------------------------------
SELECT *
FROM bill
WHERE fee = ( SELECT MAX(fee)
    FROM bill)

哪間房住最多人
-------------------------------
select address, n from (
   select hid, count(uid) as n from Live
   group by hid
) as x, House
where n = (
   select max(n)
   from (
       select hid, count(uid) as n from Live
       group by hid
   ) as x  
) and x.hid = House.hid

帳單金額總額最低的電話號碼 地址 帳單金額
------------------------------
select Phone.tel, address, sum_fee
from (
   select tel, sum(fee) as sum_fee
   from Bill
   group by tel       
) as x, Phone, House
where x.tel = Phone.tel and Phone.hid = House.hid
   and sum_fee = (
       select sum(fee) as sum_fee from Bill
       group by tel
       order by sum_fee
       limit 1       
   )

重複資料刪除
------------------------------
SELECT DISTINCT LEFT(cname, 1)
FROM userinfo;

SELECT address
FROM house
WHERE hid in (
SELECT DISTINCT hid FROM live)
垂直合併資料
UNION ALL
SELECT '苗栗縣'

這樣只會新增一個
-----------------
UNION 
SELECT '苗栗縣'
UNION 
SELECT '苗栗縣'

case用法
------------------------------
SELECT *,
	CASE 
    	WHEN fee > 500 THEN fee * 0.8
        WHEN fee > 300 THEN fee * 0.9
        ELSE fee
    END AS discount
FROM bill


查詢>1000
------------------------------
SELECT * FROM(
SELECT tel,	sum(fee) as sum_fee
FROM bill
GROUP by tel) as x
WHERE sum_fee > 1000

group by 之前用where 之後用 having

SELECT tel,	sum(fee) as sum_fee
FROM bill
GROUP by tel
HAVING sum_fee > 1000

寫入資料庫
-------------------------------
INSERT INTO userinfo(uid,cname) VALUES(
     'B02','Tom')

修改資料庫
-----------------------------
UPDATE userinfo SET cname = '孫小毛', uid = 'Z01'
WHERE uid = 'A03'


時間
------------------------------
SELECT now()
SELECT adddate(now(), 3)
SELECT adddate(now(), -3)
SELECT adddate(now(), INTERVAL 7 hour)
SELECT datediff(now(), '2024/1/1 0:0:0')
SELECT timestampdiff(month,now(), '2024/1/1 0:0:0') 以月份去計算
SELECT date_format(now(),'西元%Y年%m月')
SELECT concat('西元',year(now()),'年')
SELECT week(now())
SELECT weekday(now())


計算歲數
--------------------------------
SELECT *, floor(datediff(now(), birthday) / 365.25) as age
FROM userinfo


當月壽星打折
---------------------------------
SELECT cname, floor(
    CASE
    	when month(birthday) = month(now()) THEN billing * 0.8
    	ELSE billing
    end) as total
FROM (
    SELECT *,floor(datediff(now(), birthday) / 365.25) as age,1000 as billing
    FROM userinfo
) as tmp

每季金額(缺的季份補0)
---------------------------------
SELECT q ,sum(total) as sum_fee
FROM(
SELECT quarter(dd) as q, sum(fee) as total
FROM bill
WHERE year(dd) = 2019
GROUP by quarter(dd) 
union all
SELECT 1,0
union all
SELECT 2,0
union all
SELECT 3,0
union all
SELECT 4,0
    ) as tmp
GROUP by q

上半年下半年金額    
----------------------------------
SELECT half_year ,sum(total) as sum_fee
FROM(
SELECT
    CASE
    	WHEN month(dd) BETWEEN 1 and 6 THEN '上半年'
    	WHEN month(dd) BETWEEN 7 and 12 THEN '下半年'
    END as half_year,
    sum(fee) as total
FROM bill
WHERE year(dd) = 2019  =====>慢到爆
WHERE dd BETWEEN '2024/1/1 0:0:0' and '2024/12/31 23:59:59.999' =====>快到升天
GROUP by half_year
union all
SELECT '上半年',0
union all
SELECT '下半年',0
    ) as tmp
GROUP by half_year

時間
--------------------------------
SELECT now();
SELECT adddate(UTC_TIMESTAMP(), INTERVAL 8 hour) UTC+8
SELECT unix_timestamp(); 格林威治時間
SELECT from_unixtime(1735530486) 格林威治時間轉成一般時間


trigger
--------------------------------
DROP TRIGGER if EXISTS userinfo_insert;
DELIMITER $$
CREATE TRIGGER userinfo_insert AFTER INSERT
on userinfo FOR EACH ROW 
BEGIN
	SET @uid = new.uid;
    SET @cname = ifnull(new.cname, 'NONAME');
    SET @body = concat('將',@uid,', ',@cname,'插入到UserInfo資料表');
    INSERT into log (body) VALUES (@body);
END $$
DELIMITER ;


INSERT into userinfo (uid, cname) VALUES ('B01', 'David');
SELECT * FROM userinfo;
SELECT * FROM log;


禁止更新兩筆以上資料
-------------------------------------
DROP TRIGGER if EXISTS userinfo_update_block;
DELIMITER $$
CREATE TRIGGER userinfo_update_block BEFORE UPDATE
on userinfo FOR EACH ROW 
BEGIN
	if @count is null THEN
    	set @count = 1;
    ELSE
    	set @count = @count+1;
    end if;
    
    if @count > 1 and not (old.password <=> new.password)  THEN
    	SIGNAL SQLSTATE '45000' set MESSAGE_TEXT = '更新兩筆以上資料';
    end IF;
END $$
DELIMITER ;


預存程式
--------------------------------------
DROP PROCEDURE if EXISTS test;
DELIMITER $$
-- 預存程序 store procedure
create PROCEDURE test(myuid varchar(20))
BEGIN
	SELECT * FROM userinfo WHERE uid = myuid;
END $$
DELIMITER ;


call test('A01')

登陸回傳status
-------------------------------------------
DROP PROCEDURE if EXISTS login;
DELIMITER $$
-- 預存程序 store procedure
create PROCEDURE login(myuid varchar(20), mypwd varchar(20))
BEGIN
	SELECT count(*) as status FROM userinfo WHERE uid = myuid and password = mypwd;
END $$
DELIMITER ;


註冊
--------------------------------------------
drop PROCEDURE if EXISTS register;
DELIMITER $$
-- 預存程序 stored procedure
create PROCEDURE register(myuid varchar(20), mycname varchar(50), myaddress varchar(100))
begin
	DECLARE n int;  宣告變數
    DECLARE myhid int DEFAULT null; 宣告變數
   select count(*) into n from UserInfo where uid = myuid;
   if @n = 1 then
       select 'false' as status;
   else
       insert into UserInfo (uid, cname) values (myuid, mycname);
       select hid into myhid from House where address = myaddress;
       if myhid is null then
           insert into House (address) values (myaddress);
       end if;
       select hid into myhid from House where address = myaddress;
       insert into Live (uid, hid) values (myuid, myhid);
       select 'OK' as status;       
   end if;
end $$
DELIMITER ;



DELETE  FROM userinfo WHERE uid = 'B02';
DELETE  FROM live WHERE uid = 'B02';
DELETE  FROM house WHERE address = '花蓮市...路';

call register('B02','Tom','花蓮市...路');


while迴圈註冊
-----------------------------------------
drop PROCEDURE if EXISTS test;
DELIMITER $$
-- 預存程序 stored procedure
create PROCEDURE test()
begin
	DECLARE n int DEFAULT 1000;
    aaa: while n > 0 DO
    	if n = 3 THEN
        	leave aaa;
        end if;
    	INSERT into userinfo (uid,cname) VALUES (concat('X',n),concat('X',n));
    	set n = n - 1; 
    end while;
end $$
DELIMITER ;


回傳變數
------------------------------------------
-- in : call-by-value 傳值呼叫
-- inout : call-by-address 傳址呼叫
drop PROCEDURE if EXISTS test;
DELIMITER $$
CREATE PROCEDURE test(INOUT n int) ====>inout / in / out
BEGIN
	set n = n + 1;

END $$
DELIMITER ;

除法運算
----------------------------------------------
drop PROCEDURE if EXISTS test;
DELIMITER $$
CREATE PROCEDURE test(a double, b double, inout error int)
BEGIN
	set error = 0;
	if b = 0 THEN
    	set error = 1;
    ELSE
    	SELECT a / b as result;
    end if;
END $$
DELIMITER ;


set @error = 0;
call test(5, 0, @error);
SELECT @error;


FUNCTION
------------------------------------------------
drop FUNCTION if EXISTS myadd;
DELIMITER $$
CREATE FUNCTION myadd(a double, b double) RETURNS double
BEGIN
	RETURN a + b;
END $$
DELIMITER ;


SELECT myadd(5, 3) as result


解釋sum()
--------------------------------------------------
drop PROCEDURE if EXISTS test1;
DELIMITER $$
CREATE PROCEDURE test1()
BEGIN
	DECLARE EOF bool DEFAULT false;
    DECLARE n int;
    DECLARE dd1 date;
    DECLARE total int DEFAULT 0;
    
	DECLARE c CURSOR for SELECT fee,dd FROM bill;
	DECLARE CONTINUE HANDLER FOR not found set EOF = true;
    
    open c;
    FETCH c into n,dd1;
    while ! EOF DO
    	if year(dd1) = 2024 then
    		if n >= 700 THEN
        		set total = total + n * 0.8;    
        	ELSE set total = total + n;
        	END if;
    	end if;
    	FETCH c into n,dd1;
    end WHILE;
    
    SELECT total as result;
    close c;
END $$
DELIMITER ;


SELECT sum(newfee) as result
FROM(
SELECT fee,
	CASE
		when fee >= 700 then fee * 0.8
    	ELSE fee
    END as newfee
FROM bill 
where year(dd) = 2024) as tmp;

CALL test1() =====>跟上方程式一樣



預設密碼 uid後兩碼及生日月份+日期
------------------------------------------
drop PROCEDURE if EXISTS setpwd;
DELIMITER $$
CREATE PROCEDURE setpwd()
BEGIN
	DECLARE EOF bool DEFAULT false;
    DECLARE n varchar(10);
    DECLARE dd1 date;
    DECLARE pwd varchar(20) DEFAULT null;
    
	DECLARE c CURSOR for SELECT uid,birthday,password FROM userinfo;
	DECLARE CONTINUE HANDLER FOR not found set EOF = true;
    
    open c;
    FETCH c into n,dd1,pwd;
    while ! EOF DO
    	if pwd is null or pwd = '' then
    		set pwd = CONCAT(RIGHT(n, 2), LPAD(MONTH(dd1), 2, '0'), LPAD(DAY(dd1), 2, '0'));
            update userinfo set password = pwd WHERE uid = n;
    	end if;
        FETCH c into n,dd1,pwd;
    end WHILE;
    close c;
END $$
DELIMITER ;


or

drop PROCEDURE if EXISTS setpwd;
DELIMITER $$
CREATE PROCEDURE setpwd()
BEGIN
	DECLARE EOF bool DEFAULT false;
    DECLARE myuid varchar(10);
    DECLARE mybirthday date;
    DECLARE mypassword varchar(20);
    
	DECLARE c CURSOR for SELECT uid,birthday,password FROM userinfo WHERE password is null;
	DECLARE CONTINUE HANDLER FOR not found set EOF = true;
    
    open c;
    FETCH c into myuid,mybirthday,mypassword;
    while ! EOF DO
    	set mypassword = concat(RIGHT(myuid,2), date_format(mybirthday,'%m%d'));
        UPDATE userinfo set password = mypassword where uid = myuid;
        FETCH c into myuid,mybirthday,mypassword;
    end WHILE;
    close c;
END $$
DELIMITER ;


異動指令
-----------------------------------------------------
start TRANSACTION;  ====>啟動異動指令
insert into userinfo (uid, cname) VALUES ('C01', 'David');
-- ROLLBACK;   ====>選擇返回
COMMIT;        ====>選擇提交
SELECT * FROM userinfo;

異動指令
---------------------------------------------------
drop PROCEDURE if EXISTS test;
DELIMITER $$
CREATE PROCEDURE test()
BEGIN
	START TRANSACTION;
	set @err = 0;
    
    UPDATE userinfo set cname = '1234' WHERE uid = 'C01';
	set @err = @err + @@error_count;
    INSERT into userinfo (uid) VALUES ('D01');
    set @err = @err + @@error_count;
    
    if @err = 0 THEN
    	commit;
    ELSE
    	ROLLBACK;
    end if;
END $$
DELIMITER ;



超賣
-----------------------------------------------
UPDATE Ticket set quantity = 1 WHERE tid = 1;
drop PROCEDURE if EXISTS buy;
create PROCEDURE buy()
BEGIN
    DECLARE n int;
    --查詢
    SELECT quantity into n FROM Ticket where tid = 1;
    do SLEEP(10);
    --判斷
    if n > 0 THEN
        --執行
        UPDATE Ticket set quantity = quantity -1 WHERE tid = 1;
        SELECT '買走一張票' as status;
    else 
        SELECT '賣完了' as status;
    end if;
end;


解決超賣(通解)
-------------------------------------------------
UPDATE Ticket set quantity = 1 WHERE tid = 1;
drop PROCEDURE if EXISTS buy1;
create PROCEDURE buy1()
BEGIN
    DECLARE n int;
    START TRANSACTION;  ===>上X鎖只為一個人服務
        --執行
        UPDATE Ticket set quantity = quantity -1 WHERE tid = 1;
        do SLEEP(10);
    
        --查詢
        SELECT quantity into n FROM Ticket where tid = 1;
    
        --判斷
        if n >= 0 THEN
            COMMIT;     ====>結束才接下一人
            SELECT '買走一張票' as status;
        else 
            ROLLBACK;
            SELECT '賣完了' as status;
        end if;
end;



手動上鎖
----------------------------------------------
START TRANSACTION;
    UPDATE userinfo set password = '1'
    WHERE uid = 'A01' ;
    DO sleep(10);
    ROLLBACK;
SELECT 'done';


SELECT * FROM userinfo 
WHERE uid = 'A01'
lock in SHARE mode; ======>上S鎖
for UPDATE ===============>上X鎖
查詢上鎖
select * from information_schema.innodb_locks;
select * from information_schema.innodb_lock_waits

----------------------------------------------------
drop PROCEDURE if EXISTS buy2;
UPDATE ticket set quantity = 1 WHERE tid = 1;
CREATE PROCEDURE buy2()
BEGIN
    DECLARE n int;
    start TRANSACTION; --啟動交易讓下一行的X鎖持續到提交完
        SELECT quantity into n from ticket WHERE tid = 1 for UPDATE;
        do sleeP(10);
        if n >= 0 THEN                
            SELECT quantity into n from ticket WHERE tid = 1;
            SELECT '買走一張票' as status;
        else                 
            SELECT '賣完了' as status;
        end if;
    commit;
end;


超賣(資料庫解)
-----------------------------------------------------
drop PROCEDURE if EXISTS buy2;
UPDATE ticket set quantity = 1 WHERE tid = 1;
CREATE PROCEDURE buy2()
BEGIN
    DECLARE n int;
    start TRANSACTION; --啟動交易讓下一行的X鎖持續到提交完
        SELECT quantity into n from ticket WHERE tid = 1 for UPDATE;
        do sleeP(10);
        if n > 0 THEN                
            UPDATE Ticket set quantity = quantity -1 WHERE tid = 1;
            SELECT '買走一張票' as status;
        else                 
            SELECT '賣完了' as status;
        end if;
    commit;
end;

查詢type = index or all都很慢
--------------------------------------------------
EXPLAIN
SELECT uid,cname,birthday
FROM userinfo
WHERE uid = 'Z5000'


複合欄位索引 第一位是主要欄位
-------------------------------------------
EXPLAIN
SELECT * FROM userinfo 
WHERE 
	 uid = '' 
    and cname = '' 
    and password = ''
預設索引
 /*
uid(+),cname(+),pwd(+)
uid(+),cname(+)
uid(+)
uid(-)
uid(-),cname(-)
uid(-),cname(-),pwd(-)

*/

PCHOME練習
------------------------------------------
--測試插入資料庫
INSERT into productevaluate(uid,cname,pid,rating,evaluate)
VALUES ('A01','Tom','A01',5,'Very Good Product')
--查看所需資料庫
SELECT * from productevaluate
SELECT * from member
SELECT * from products
--刪除資料表
DELETE FROM productevaluate
--增加外鍵
ALTER TABLE productevaluate
ADD CONSTRAINT fk_uid_users
FOREIGN KEY (uid) 
REFERENCES member1(uid);

ALTER TABLE productevaluate
ADD CONSTRAINT fk_pid_products
FOREIGN KEY (pid) 
REFERENCES products(id);

ALTER TABLE productevaluate
DROP FOREIGN KEY fk_uid_users;
--查看資料表結構
SHOW CREATE TABLE productevaluate;
SHOW CREATE TABLE member;

--更改資料結構
ALTER TABLE productevaluate
MODIFY COLUMN uid int NOT NULL

--增加評價的purcedure
drop PROCEDURE if EXISTS addEvaluate;
CREATE PROCEDURE addEvaluate(myuid varchar(21), mypid int, myrating tinyint, myevaluate text)
BEGIN
    DECLARE mycname VARCHAR(51);
    
    IF NOT EXISTS (SELECT 1 FROM member1 WHERE uid = myuid) THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = '會員不存在';
    END IF;
    
    IF myrating not between 0 and 5 then
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = '評分需介於0~5';
    end if;

    IF NOT EXISTS (SELECT 1 FROM products WHERE id = mypid) THEN
        SIGNAL SQLSTATE '45001'
        SET MESSAGE_TEXT = '此商品不存在';
    END IF;

    IF EXISTS (SELECT 1 FROM productevaluate WHERE uid = myuid AND pid = mypid) THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = '該會員已對此商品評價過';
    END IF;


    SELECT cname into mycname from member1 WHERE myuid = member1.uid;
    INSERT into productevaluate (uid, cname, pid, rating, evaluate)
    VALUES (myuid, mycname, mypid, myrating, myevaluate);

    SELECT '評價已送出';
end;
--計算評價總數
drop PROCEDURE if EXISTS countEvaluate;
CREATE PROCEDURE countEvaluate(mypid int)
BEGIN
    DECLARE n int DEFAULT 0;
    if NOT EXISTS (SELECT 1 FROM products where id = mypid) THEN
        SIGNAL SQLSTATE '45001'
        SET MESSAGE_TEXT = '此商品不存在';
    END IF;

    SELECT count(id) into n FROM productevaluate WHERE pid = mypid;
    SELECT n as evaluate_count;
end;
--計算評價平均分數
drop PROCEDURE if EXISTS avgEvaluate;
CREATE PROCEDURE avgEvaluate(mypid int)
BEGIN
    DECLARE n int DEFAULT 0;
    DECLARE total int DEFAULT 0;
    DECLARE result DOUBLE DEFAULT 0;
    if NOT EXISTS (SELECT 1 FROM products where id = mypid) THEN
        SIGNAL SQLSTATE '45001'
        SET MESSAGE_TEXT = '此商品不存在';
    END IF;
    SELECT sum(rating), count(rating) into total, n from productevaluate WHERE pid = mypid;
    IF n = 0 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = '此商品尚無評價';
    END IF;    
    SET result = total / n;
    SELECT result as avg_evaluate;
end;
--計算每個評分總數
DROP PROCEDURE IF EXISTS ratingCount;
CREATE PROCEDURE ratingCount(mypid int)
BEGIN
    if NOT EXISTS (SELECT 1 FROM products where id = mypid) THEN
        SIGNAL SQLSTATE '45001'
        SET MESSAGE_TEXT = '此商品不存在';
    END IF;
    SELECT 
        rating AS score,
        COUNT(*) AS count
    FROM 
        productevaluate
    WHERE 
        pid = mypid
    GROUP BY 
        rating
    ORDER BY 
        rating;
END;
--刪除評價
DROP PROCEDURE IF EXISTS deleteEvaluate;
CREATE PROCEDURE deleteEvaluate(myuid VARCHAR(21), mypid int)
BEGIN
    IF NOT EXISTS (
        SELECT 1 
        FROM productevaluate 
        WHERE uid = myuid AND pid = mypid
    ) THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = '該評價不存在，無法刪除';
    END IF;

    DELETE FROM productevaluate
    WHERE uid = myuid AND pid = mypid;
    SELECT CONCAT('成功刪除會員 ', myuid, ' 對商品 ', mypid, ' 的評價') AS message;
end;
--查詢會員的評價
DROP PROCEDURE IF EXISTS searchmemberEvaluate;
CREATE PROCEDURE searchmemberEvaluate(myuid VARCHAR(21))
BEGIN
    IF NOT EXISTS (
        SELECT 1 
        FROM productevaluate 
        WHERE uid = myuid
    ) THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = '該會員無評價';
    END IF;

    SELECT 
        *
    FROM 
        productevaluate
    WHERE 
        uid = myuid;    
end;
--實操
call addEvaluate('001', 3, 4, "GOOD PRODUCT"); --不可重複評價 會員不存在 商品不存在
call countEvaluate(3); --商品不存在
call avgEvaluate(3);    --商品不存在 商品無評價
call ratingCount(3);    --商品不存在
call deleteEvaluate('007', 5) --評價不存在

call searchmemberEvaluate('001'); --會員無評價
SELECT * from productevaluate WHERE pid =3;
SELECT * from member;
SELECT * from products;

drop PROCEDURE if EXISTS showEvaluate;
CREATE PROCEDURE showEvaluate(mypid INT)
BEGIN    
    DECLARE n INT DEFAULT 0;

    -- 檢查商品是否存在
    IF NOT EXISTS (SELECT 1 FROM products WHERE id = mypid) THEN
        SIGNAL SQLSTATE '45001' SET MESSAGE_TEXT = '此商品不存在';
    END IF;

    -- 檢查評價數量
    SELECT COUNT(rating) INTO n FROM productevaluate WHERE pid = mypid;

    IF n = 0 THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = '此商品尚無評價';
    END IF;

    -- 返回統計結果
    SELECT 
        AVG(rating) AS avg_evaluate,
        COUNT(rating) AS evaluate_count,
        SUM(CASE WHEN rating = 0 THEN 1 ELSE 0 END) AS rating_0_count,
        SUM(CASE WHEN rating = 1 THEN 1 ELSE 0 END) AS rating_1_count,
        SUM(CASE WHEN rating = 2 THEN 1 ELSE 0 END) AS rating_2_count,
        SUM(CASE WHEN rating = 3 THEN 1 ELSE 0 END) AS rating_3_count,
        SUM(CASE WHEN rating = 4 THEN 1 ELSE 0 END) AS rating_4_count,
        SUM(CASE WHEN rating = 5 THEN 1 ELSE 0 END) AS rating_5_count
    FROM 
        productevaluate
    WHERE 
        pid = mypid;
END;

call showEvaluate(1)